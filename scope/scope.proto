syntax = scope;

message ServiceList
{
    repeated string serviceList = 1;
}

/**
 * Introspection result for a given message.
 */
message MessageInfo
{
    message FieldInfo
    {
        required string name       = 1;
        /**
         * The protocol buffer type for this field. The types are:
         * 
         * == ============================
         * 1  Double
         * 2  Float
         * 3  Int32
         * 4  Uint32
         * 5  Sint32
         * 6  Fixed32* 7  Sfixed32
         * 8  Bool
         * 9  String
         * 10 Bytes
         * 11 Message
         * 12 Int64 (not supported yet)
         * 13 Uint64 (not supported yet)
         * 14 Sint64 (not supported yet)
         * 15 Fixed64 (not supported yet)
         * 16 Sfixed64 (not supported yet)
         * == ============================
         */
        required uint32 type       = 2;
        /**
         * The unique protocol buffer number for this field.
         */
        required uint32 number     = 3;
        /**
         * Specifies whether the fields is required, optional or repeated:
         * 
         * = ========
         * 0 Required
         * 1 Optional
         * 2 Repeated
         * = ========
         */
        optional uint32 quantifier = 4 [default = 0];
        /**
         * ID of message this field references, only set for Message fields
         */
        optional uint32 messageID  = 5;
    }

    required uint32    id        = 1;
    required string    name      = 2;
    repeated FieldInfo fieldList = 3;
    optional uint32    parentID  = 4;
}

message EventInfo
{
    required string name      = 1;
    required uint32 number    = 2;
    required uint32 messageID = 3;
}

message Service
{
    required string name          = 1;
    required string version       = 2;
}

message HostInfo
{
    required uint32  stpVersion      = 1;
    required string  coreVersion     = 2;
    required string  platform        = 3;
    required string  operatingSystem = 4;
    required string  userAgent       = 5;
    repeated Service serviceList     = 6;
}

message ClientInfo
{
    required string format = 1;
}

message MessageInfoList
{
    repeated MessageInfo messageList = 1;
}

message ServiceSelection
{
    required string name = 1;
}

message ServiceInfo
{
    repeated CommandInfo commandList = 1;
    repeated EventInfo   eventList   = 2;
}

 
service Scope
{
    option (cpp_hfile) = "modules/scope/src/scope_protocol_service.h";
    option (core_release) = "2.5";
    option (version) = "1.0";
    option (cpp_class) = OpScopeProtocolService;
 
    command Connect(ClientInfo) returns (Default) = 3;
    command Disconnect(Default) returns (Default) = 4;
    command Enable(ServiceSelection) returns (ServiceResult) = 5;
    command Disable(ServiceSelection) returns (ServiceResult) = 6;
    command Info(ServiceSelection) returns (ServiceInfo) = 7;
    command Quit(Default) returns (Default) = 8;
    command HostInfo(Default) returns (HostInfo) = 10;
    command MessageInfo(MessageSelection) returns (MessageInfoList) = 11;
    event OnServices returns (ServiceList) = 0;
    event OnQuit returns (Default) = 1;
    event OnConnectionLost returns (Default) = 2;
    event OnError returns (ErrorInfo) = 9;
}

message ErrorInfo
{
    required string description = 1;
}

/**
 * Selects which messages to introspect.
 */
message MessageSelection
{
    /**
     * Name of service to fetch messages from. Message ids are unique per service.
     */
    required string serviceName    = 1;
    /**
     * Contains ids of message which should be fetched.
     */
    repeated uint32 idList         = 2;
    /**
     * Set to true to automatically include messages which are referenced (fields of type Message). This makes it easy to fetch the entire message chain for a given message.
     */
    optional bool   includeRelated = 3;
    /**
     * Set to true if all message in the service should be included. Overrides includeRelated and idList.
     */
    optional bool   includeAll     = 4;
}

message ServiceResult
{
    required string name = 1;
}

message CommandInfo
{
    required string name       = 1;
    required uint32 number     = 2;
    required uint32 messageID  = 3;
    required uint32 responseID = 4;
}


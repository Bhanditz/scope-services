
CSS Editing Improvements
========================

Main Context
------------

While the user is editing a property, the changes are reflected immediately in the host. After he
submits his changes, the whole view in the client is update to reflect the changes, especially in
regard of the overwritten flags.

Issues
------

Technically the Styles view in editing mode is an interface to a CSSStyleDeclaration. Editing and
updating a property means using setPropertyValue(<property-name>, <property-value>, 
<property-priority>) on that interface. This will always be treated as the last set property in the
declaration, meaning any order of properties presented to the user is disregarded. Shorthands are 
accept in that call, but they will be resolved to single properties. Invalid properties or values
have no effect at all. 

Some examples:

1. a user changes

  div 
  { 
     color: #222222;
     margin-top: 14px;
  }

to

  div 
  { 
     margin: 0px;
     color: #222222;
     margin-top: 14px;
  }

the margin-top: 14px; will have no effect. 
On retrieving the matching rules again to reflect the changes this will actually look like:

  div 
  { 
     color: #222222;
     margin-top: 0px;
     margin-right: 0px;
     margin-bottom: 0px;
     margin-left: 0px;
  }

2. a user changes

  div 
  { 
     color: #222222;
     margin-top: 14px;
  }

to

  div 
  { 
     color: #222222;
     foo: bar;
  }

this will have no effect. 
On retrieving the matching rules again to reflect the changes this will actually look like:

  div 
  { 
     color: #222222;
     margin-top: 14px;
  }

suggestion to solve the issue
-----------------------------

To reflect the user changes in a better way, we will introduce a "user layer" on the client side 
in the moment where the user starts to change some rule of the given declaration. This layer will
reflect exactly the user input.

If the user does create a shorthand property we will scan the declaration for any resolved property
for that shorthand and submitting them after the update of the current edited property. This will
preserve the property order as presented to the user.

On retrieving the matching rules again some kind of diff will be created to reflect the changes. 
If the user has submitted a valid shorthand, only that shorthand will be displayed with an 
expanding button. Only if he will expand the shorthand the resolved properties will be displayed.

To still be able to flag properties as overwritten, we will introduce a new flag, partial 
overwritten for the case that some of the resolved properties of the shorthand are actually 
overwritten, but not all of them.

If the user has submitted an invalid property or value it will be flagged and displayed as invalid
( e.g. line-through ) 

Some examples:

1. a user changes

  div 
  { 
     color: #222222;
     margin-top: 14px;
  }

to

  div 
  { 
     margin: 0px;
     color: #222222;
     margin-top: 14px;
  }

On retrieveing the matching rules again this will be dispalayed as

  div 
  { 
   + margin: 0px; [partial overwritten]
     color: #222222;
     margin-top: 14px;
  }

the user can expand that to:

  div 
  { 
   - margin: 0px; 
       margin-top: 0px; [overwritten]
       margin-right: 0px;
       margin-bottom: 0px;
       margin-left: 0px;
     color: #222222;
     margin-top: 14px;
  }

2. a user changes

  div 
  { 
     color: #222222;
     margin-top: 14px;
  }

to

  div 
  { 
     color: #222222;
     foo: bar;
  }

On retrieveing the matching rules again this will be dispalayed as:

  div 
  { 
     color: #222222;
     foo: bar; [invalid]
  }


time estimation to implement this changes
-----------------------------------------

1 - 2 weeks

related bugs
------------
DFL-156, DFL-89
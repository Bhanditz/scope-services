
# Scope protocol version 5 http logger specification draft

Last modified by runeh@opera.com, 08 dec. 2008

## Improvements required between p4 and p5:

- Enable access to information about what Opera knows and thinks about a resource.
- Enable access to a body of data sent and received
-- but only when required, as in profile vs. debug modes
- Enable splitting sets of requests into request contexts, for profiling full page
  loads

## Observations

There are some things that are very natural for an http logger to have access
to. Some of these are potentially difficult to expose in a nice way because
of the architecture of Opera. Most importantly, we are interested in showing
information from the entire lifespan of a request. This may span modules
in a ways that dictate the structure of the protocol.


### What is a meta request?

A meta request is the highest level request for a resource. It means
"There is a resource I need somewhere. Please find it for me". This may or
may not lead to an actual request. Resources may be cached, or they may
already be in the browser somewhere because of having been loaded in a
different tab or window. Consider a favicon.ico file for a site.
Only one instance of it is fetched even though several tabs require the same
resource. When a new tab requests that resource, a meta-request occurs.

## BNF:

    PROTOCOL ::= (COMMAND | EVENT)* ;
        
    COMMAND ::= SET-RESPONSE-DATA-MODE
              | GET-RESOURCE ;
    
    EVENT ::= META-REQUEST
            | REQUEST
            | RESPONSE-HEADER
            | RESPONSE-FINISHED
            | RESOURCE-DATA ;
    
    
    # Events:
    
    # A meta request event will _always_ be fired when a resource is requested:
    META-REQUEST ::= "<meta-request>"
                       CONTEXT
                       RESOURCE-ID
                       URL
                     "</meta-request>" ;

    # A request event _may_ be fired when a resource is requested.
    # If there is a request event, there _must_ be a RESPONSE-HEADER and
    # RESPONSE-FINISHED event.
    REQUEST ::= "<request>"
                  REQUEST-ID
                  RESOURCE-ID
                  CONTEXT
                  URL
                  RAW-REQUEST-HEADER # same as HEADER in proto-4
                "</request>" ;
    
    RESPONSE-HEADER ::= "<response-header>"
                          REQUEST-ID
                          RESOURCE-ID
                          TIME
                          RAW-RESPONSE-HEADER # same as HEADER in proto-4
                          PARSED-HEADERS
                          METHOD
                          STATUS
                        "</response-header>" ;
    
    RESPONSE-FINISHED ::= "<response-finished>"
                            REQUEST-ID
                            RESOURCE-ID
                            TIME
                            CONTENT-LENGTH
                          "</response-finished>" ;
    
    # A response-finished event will always be followed by a RESOURCE-DATA
    # event. The resource may or may not contain the content of the resouce
    # depending on the current settings.
    # A RESOURCE-DATA event may also be the result of a GET-RESOURCE action
    RESOURCE-DATA ::= "<resource-data>"
                        RESOURCE-ID
                        PARSED-HEADERS
                        URL
                        MIME-TYPE
                        CONTENT?
                      "</resource-data>" ;



    # Commands:
    
    SET-RESPONSE-DATA-MODE ::= "<set-response-data-mode>"
                                 RESPONSE-DATA-MODE
                               "</set-response-data-mode>"

    GET-RESOURCE ::= "<get-resource>"
                       RESOURCE-ID
                       RESPONSE-DATA-OPTIONS
                     "</get-resource>"


    # The parts of the above.
    
    CONTENT ::= "<resource-content>"
                  RESOURCE-ENCODING
                  CONTENT-LENGTH
                  CONTENT-DATA
                "</resource-content>" ;
    
    RAW-REQUEST-HEADER ::= "<raw-request-header>" TEXT "</raw-request-header>" ;
    
    RAW-RESPONSE-HEADER ::= "<raw-response-header>" TEXT "</raw-response-header>" ;
    
    # It is possible and legal to get several headers with the same name:
    PARSED-HEADERS ::= "<parsed-headers>"
                         HEADER*
                       "</parsed-headers>" ;
    
    HEADER ::= "<header>"
                 HEADER-NAME
                 HEADER-VALUE
               "</header>" ;
    
    HEADER-NAME ::= "<header-name>" STRING "</header-name>" ;
    
    HEADER-VALUE ::= "<header-value>" STRING "</header-value>" ;
    
    
    CONTEXT ::= WINDOW-ID
                DOCUMENT-ID ;
    
    
    WINDOW-ID ::= "<window-id>" UNSIGNED "</window-id>" ;
    
    DOCUMENT-ID ::= "<document-id>" UNSIGNED "</document-id>" ;
    
    RESOURCE-ID ::= "<resource-id>" UNSIGNED "</resource-id>" ;
    
    
    RESPONSE-DATA-MODE ::= "full" | "only-metadata"


## Caveats

- When in only-metadata mode, there is no guarantee that what you get back when
  requesting a resource is what was retrieved the first time the resource was
  requested.
- The issue of "request context" has not been dealt with in any way. That is, a
  context to which numerous requests belong. This is needed in order to show
  nice graphs, for instance of how long it takes to load a certain web page.
  A possible solution would be to introduce a <new-request-context> event. This
  would contain the window-id as its content. The event would be raised
  whenever a window (as windows are defined in the context of scope) is
  reloaded, or navigation switches from one url to another. Who can opine about
  the feasability of getting this from core? Would platform need to be involved?
